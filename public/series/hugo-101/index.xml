<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hugo 101 on Decks Blogs</title>
    <link>http://localhost:1313/series/hugo-101/</link>
    <description>Recent content in Hugo 101 on Decks Blogs</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Fri, 28 Jun 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/series/hugo-101/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Designing a 5 stage pipelined 64 bit RISC-V Processor</title>
      <link>http://localhost:1313/posts/2024/06/designing-a-5-stage-pipelined-64-bit-risc-v-processor/</link>
      <pubDate>Fri, 28 Jun 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2024/06/designing-a-5-stage-pipelined-64-bit-risc-v-processor/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;I’ve decided to embark on an exciting journey of building a 64-bit pipelined RISC-V processor. My implementation will adhere to the RV64I base integer instruction set, the foundational core of the RISC-V architecture.&lt;/p&gt;&#xA;&lt;p&gt;If you’re curious about the details of the RISC-V specification, feel free to check out the &lt;a href=&#34;https://riscv.org/technical/specifications/&#34;&gt;official RISC-V Instruction Set Manual&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;The &amp;lsquo;64&amp;rsquo; in RV64I means that registers, memory addresses, and integer operations are performed with values of 64-bit width. The &amp;lsquo;I&amp;rsquo; refers to the Integer base instruction set, which includes instructions for integer operations only.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Migrate to Hugo from Jekyll</title>
      <link>http://localhost:1313/posts/2014/03/migrate-to-hugo-from-jekyll/</link>
      <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2014/03/migrate-to-hugo-from-jekyll/</guid>
      <description>&lt;p&gt;##Lets design the memory!&lt;/p&gt;&#xA;&lt;p&gt;This post explains a simple cache-memory architecture designed for an RV64I-based system. The architecture consists of three modules: &lt;code&gt;l1_cache&lt;/code&gt;, &lt;code&gt;main_memory&lt;/code&gt;, and &lt;code&gt;cache_controller&lt;/code&gt;. Each module and its functionality is outlined below.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;1-l1-cache&#34;&gt;&lt;strong&gt;1. L1 Cache&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;p&gt;The &lt;code&gt;l1_cache&lt;/code&gt; module represents the Level-1 (L1) cache. It provides faster access to frequently used data compared to main memory.&lt;/p&gt;&#xA;&lt;h4 id=&#34;inputs-and-outputs&#34;&gt;&lt;strong&gt;Inputs and Outputs&lt;/strong&gt;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Inputs&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;clk&lt;/code&gt;: Clock signal.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;mode&lt;/code&gt;: Operation type (read: &lt;code&gt;0&lt;/code&gt;, write: &lt;code&gt;1&lt;/code&gt;).&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;address&lt;/code&gt;: A 64-bit memory address.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;write_data&lt;/code&gt;: 64-bit data to be written into the cache.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Outputs&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;read_data&lt;/code&gt;: 64-bit data read from the cache.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;hit&lt;/code&gt;: Indicates whether the requested data is found in the cache.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;stored_data&lt;/code&gt; and &lt;code&gt;stored_address&lt;/code&gt;: Represent the data and address evicted from the cache during a write.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;cache-structure&#34;&gt;&lt;strong&gt;Cache Structure&lt;/strong&gt;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The cache is modeled as a memory array (&lt;code&gt;l1_cache&lt;/code&gt;) with &lt;strong&gt;64 blocks&lt;/strong&gt; of 64 bytes (512 bits) each. Each block consists of:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Tag (32 bits)&lt;/strong&gt;: The upper 32 bits of the address that identify the corresponding block in main memory.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Block Index (26 bits)&lt;/strong&gt;: Bits [31:6] of the address that identify the specific cache block.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Word Offset (3 bits)&lt;/strong&gt;: Bits [5:3] of the address that identify the word within the block.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Data (512 bits)&lt;/strong&gt;: Stores eight 64-bit words.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;A &lt;strong&gt;valid bit array&lt;/strong&gt; tracks whether the data in each cache block is valid.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;read-and-write-operations&#34;&gt;&lt;strong&gt;Read and Write Operations&lt;/strong&gt;&lt;/h4&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Write Operation (&lt;code&gt;mode == 1&lt;/code&gt;)&lt;/strong&gt;:&lt;/p&gt;</description>
    </item>
    <item>
      <title>(Hu)go Template Primer</title>
      <link>http://localhost:1313/posts/2014/04/hugo-template-primer/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2014/04/hugo-template-primer/</guid>
      <description>&lt;p&gt;Hugo uses the excellent &lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt; &lt;a href=&#34;https://golang.org/pkg/html/template/&#34;&gt;html/template&lt;/a&gt; library for&#xA;its template engine. It is an extremely lightweight engine that provides a very&#xA;small amount of logic. In our experience that it is just the right amount of&#xA;logic to be able to create a good static website. If you have used other&#xA;template systems from different languages or frameworks you will find a lot of&#xA;similarities in Go templates.&lt;/p&gt;&#xA;&lt;p&gt;This document is a brief primer on using Go templates. The &lt;a href=&#34;https://golang.org/pkg/html/template/&#34;&gt;Go docs&lt;/a&gt;&#xA;provide more details.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Getting Started with Hugo</title>
      <link>http://localhost:1313/posts/2014/04/getting-started-with-hugo/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2014/04/getting-started-with-hugo/</guid>
      <description>&lt;h2 id=&#34;step-1-install-hugo&#34;&gt;Step 1. Install Hugo&lt;/h2&gt;&#xA;&lt;p&gt;Go to &lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;Hugo releases&lt;/a&gt; and download the&#xA;appropriate version for your OS and architecture.&lt;/p&gt;&#xA;&lt;p&gt;Save it somewhere specific as we will be using it in the next step.&lt;/p&gt;&#xA;&lt;p&gt;More complete instructions are available at &lt;a href=&#34;https://gohugo.io/getting-started/installing/&#34;&gt;Install Hugo&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;step-2-build-the-docs&#34;&gt;Step 2. Build the Docs&lt;/h2&gt;&#xA;&lt;p&gt;Hugo has its own example site which happens to also be the documentation site&#xA;you are reading right now.&lt;/p&gt;&#xA;&lt;p&gt;Follow the following steps:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Clone the &lt;a href=&#34;http://github.com/spf13/hugo&#34;&gt;Hugo repository&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;Go into the repo&lt;/li&gt;&#xA;&lt;li&gt;Run hugo in server mode and build the docs&lt;/li&gt;&#xA;&lt;li&gt;Open your browser to http://localhost:1313&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;Corresponding pseudo commands:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
