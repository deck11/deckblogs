<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Decks Blogs</title>
        <link>http://localhost:1313/posts/</link>
        <description>Recent content in Posts on Decks Blogs</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
        <lastBuildDate>Fri, 05 Jul 2024 00:00:00 +0000</lastBuildDate>
        <atom:link href="http://localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Memory Design</title>
            <link>http://localhost:1313/posts/2024/07/memory-design/</link>
            <pubDate>Fri, 05 Jul 2024 00:00:00 +0000</pubDate>
            
            <guid>http://localhost:1313/posts/2024/07/memory-design/</guid>
            <description>&lt;h2 id=&#34;lets-design-the-memory&#34;&gt;Lets design the memory!&lt;/h2&gt;
&lt;p&gt;This post explains a simple cache-memory architecture designed for an RV64I-based system. The architecture consists of three modules: &lt;code&gt;l1_cache&lt;/code&gt;, &lt;code&gt;main_memory&lt;/code&gt;, and &lt;code&gt;cache_controller&lt;/code&gt;. Each module and its functionality is outlined below.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;1-l1-cache&#34;&gt;&lt;strong&gt;1. L1 Cache&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;l1_cache&lt;/code&gt; module represents the Level-1 (L1) cache. It provides faster access to frequently used data compared to main memory.&lt;/p&gt;
&lt;h4 id=&#34;inputs-and-outputs&#34;&gt;&lt;strong&gt;Inputs and Outputs&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Inputs&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;clk&lt;/code&gt;: Clock signal.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mode&lt;/code&gt;: Operation type (read: &lt;code&gt;0&lt;/code&gt;, write: &lt;code&gt;1&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;address&lt;/code&gt;: A 64-bit memory address.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;write_data&lt;/code&gt;: 64-bit data to be written into the cache.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Outputs&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;read_data&lt;/code&gt;: 64-bit data read from the cache.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hit&lt;/code&gt;: Indicates whether the requested data is found in the cache.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stored_data&lt;/code&gt; and &lt;code&gt;stored_address&lt;/code&gt;: Represent the data and address evicted from the cache during a write.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;cache-structure&#34;&gt;&lt;strong&gt;Cache Structure&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;The cache is modeled as a memory array (&lt;code&gt;l1_cache&lt;/code&gt;) with &lt;strong&gt;64 blocks&lt;/strong&gt; of 64 bytes (512 bits) each. The 64 bit address is divided into:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Tag&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Block&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Word Offset&lt;/strong&gt;
-This cache will be a simple directly mapped cache.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;valid bit array&lt;/strong&gt; tracks whether the data in each cache block is valid.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;read-and-write-operations&#34;&gt;&lt;strong&gt;Read and Write Operations&lt;/strong&gt;&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Write Operation (&lt;code&gt;mode == 1&lt;/code&gt;)&lt;/strong&gt;:&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h2 id="lets-design-the-memory">Lets design the memory!</h2>
<p>This post explains a simple cache-memory architecture designed for an RV64I-based system. The architecture consists of three modules: <code>l1_cache</code>, <code>main_memory</code>, and <code>cache_controller</code>. Each module and its functionality is outlined below.</p>
<hr>
<h3 id="1-l1-cache"><strong>1. L1 Cache</strong></h3>
<p>The <code>l1_cache</code> module represents the Level-1 (L1) cache. It provides faster access to frequently used data compared to main memory.</p>
<h4 id="inputs-and-outputs"><strong>Inputs and Outputs</strong></h4>
<ul>
<li><strong>Inputs</strong>:
<ul>
<li><code>clk</code>: Clock signal.</li>
<li><code>mode</code>: Operation type (read: <code>0</code>, write: <code>1</code>).</li>
<li><code>address</code>: A 64-bit memory address.</li>
<li><code>write_data</code>: 64-bit data to be written into the cache.</li>
</ul>
</li>
<li><strong>Outputs</strong>:
<ul>
<li><code>read_data</code>: 64-bit data read from the cache.</li>
<li><code>hit</code>: Indicates whether the requested data is found in the cache.</li>
<li><code>stored_data</code> and <code>stored_address</code>: Represent the data and address evicted from the cache during a write.</li>
</ul>
</li>
</ul>
<h4 id="cache-structure"><strong>Cache Structure</strong></h4>
<ul>
<li>The cache is modeled as a memory array (<code>l1_cache</code>) with <strong>64 blocks</strong> of 64 bytes (512 bits) each. The 64 bit address is divided into:
<ul>
<li><strong>Tag</strong></li>
<li><strong>Block</strong></li>
<li><strong>Word Offset</strong>
-This cache will be a simple directly mapped cache.</li>
</ul>
</li>
<li>A <strong>valid bit array</strong> tracks whether the data in each cache block is valid.</li>
</ul>
<h4 id="read-and-write-operations"><strong>Read and Write Operations</strong></h4>
<ol>
<li>
<p><strong>Write Operation (<code>mode == 1</code>)</strong>:</p>
<ul>
<li>If the target block is invalid, the new tag and data are written to the cache.</li>
<li>If the block is valid but being overwritten, the existing data and address are evicted and replaced.</li>
<li>The specific word in the block to update is determined by the <code>Word Offset</code> in the address.</li>
</ul>
</li>
<li>
<p><strong>Read Operation (<code>mode == 0</code>)</strong>:</p>
<ul>
<li>On a cache <strong>hit</strong>, the corresponding word is read from the cache.</li>
<li>On a <strong>miss</strong>, the data is fetched from main memory.</li>
</ul>
</li>
</ol>
<hr>
<h3 id="2-main-memory"><strong>2. Main Memory</strong></h3>
<p>The <code>main_memory</code> module models a larger, slower memory hierarchy level. It has the following features:</p>
<h4 id="structure"><strong>Structure</strong></h4>
<ul>
<li><strong>Memory Size</strong>: 4GB (2^32 bytes) divided into <strong>64-byte blocks</strong>.</li>
<li><strong>Data</strong>: Each block contains 8 words of 64 bits each.</li>
</ul>
<h4 id="inputs-and-outputs-1"><strong>Inputs and Outputs</strong></h4>
<ul>
<li>Inputs: <code>clk</code>, <code>mode</code>, <code>address</code>, <code>write_data</code>, and <code>hit</code>.</li>
<li>Output: <code>read_data</code> provides the requested 64-bit word.</li>
</ul>
<h4 id="functionality"><strong>Functionality</strong></h4>
<ul>
<li>Reads data from the block indexed by the upper address bits.</li>
<li>Writes data to the specified word in the block if there’s a cache miss.</li>
</ul>
<hr>
<h3 id="3-cache-controller"><strong>3. Cache Controller</strong></h3>
<p>The <code>cache_controller</code> module coordinates the interaction between <code>l1_cache</code> and <code>main_memory</code>. It:</p>
<ul>
<li>Instantiates both the <code>l1_cache</code> and <code>main_memory</code> modules.</li>
<li>Ensures seamless data transfer during cache eviction by passing evicted data (<code>stored_data</code> and <code>stored_address</code>) from the cache to main memory.</li>
<li>Directs read and write operations to the appropriate memory level based on the <code>hit</code> signal.</li>
</ul>
<hr>
<h3 id="summary"><strong>Summary</strong></h3>
<p>This architecture models a simple RV64I cache-memory hierarchy. The <code>l1_cache</code> ensures faster data access for frequently used data, while the <code>main_memory</code> provides larger, slower storage. The <code>cache_controller</code> facilitates efficient data management between these levels. This design highlights concepts like cache hits, misses, eviction policies, and tag-based indexing, which are foundational to modern CPU architectures.</p>
]]></content>
        </item>
        
        <item>
            <title>Designing a 5 stage pipelined 64 bit RISC-V Processor</title>
            <link>http://localhost:1313/posts/2024/06/designing-a-5-stage-pipelined-64-bit-risc-v-processor/</link>
            <pubDate>Fri, 28 Jun 2024 00:00:00 +0000</pubDate>
            
            <guid>http://localhost:1313/posts/2024/06/designing-a-5-stage-pipelined-64-bit-risc-v-processor/</guid>
            <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;I’ve decided to embark on an exciting journey of building a 64-bit pipelined RISC-V processor. My implementation will adhere to the RV64I base integer instruction set, the foundational core of the RISC-V architecture.&lt;/p&gt;
&lt;p&gt;If you’re curious about the details of the RISC-V specification, feel free to check out the &lt;a href=&#34;https://riscv.org/technical/specifications/&#34;&gt;official RISC-V Instruction Set Manual&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The &amp;lsquo;64&amp;rsquo; in RV64I means that registers, memory addresses, and integer operations are performed with values of 64-bit width. The &amp;lsquo;I&amp;rsquo; refers to the Integer base instruction set, which includes instructions for integer operations only.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>I’ve decided to embark on an exciting journey of building a 64-bit pipelined RISC-V processor. My implementation will adhere to the RV64I base integer instruction set, the foundational core of the RISC-V architecture.</p>
<p>If you’re curious about the details of the RISC-V specification, feel free to check out the <a href="https://riscv.org/technical/specifications/">official RISC-V Instruction Set Manual</a>.</p>
<p>The &lsquo;64&rsquo; in RV64I means that registers, memory addresses, and integer operations are performed with values of 64-bit width. The &lsquo;I&rsquo; refers to the Integer base instruction set, which includes instructions for integer operations only.</p>
<h3 id="instruction-formats-in-rv64i">Instruction Formats in RV64I</h3>
<ol>
<li>
<p><strong>R-Type (Register Operations):</strong><br>
Used for operations like arithmetic (e.g., <code>ADD</code>, <code>SUB</code>), logical (e.g., <code>AND</code>, <code>OR</code>), or shifts (e.g., <code>SLL</code>, <code>SRL</code>).</p>
</li>
<li>
<p><strong>I-Type (Immediate Operations):</strong><br>
Used for arithmetic with immediate values (e.g., <code>ADDI</code>), load instructions (e.g., <code>LW</code>, <code>LD</code>), and system calls (e.g., <code>ECALL</code>).</p>
</li>
<li>
<p><strong>S-Type (Store Operations):</strong><br>
Includes store instructions like <code>SW</code> (store word) and <code>SD</code> (store double word).</p>
</li>
<li>
<p><strong>U-Type (Upper Immediate Operations):</strong><br>
Includes <code>LUI</code> (load upper immediate) and <code>AUIPC</code> (add upper immediate to program counter).</p>
</li>
<li>
<p><strong>B-Type (Branch Instructions):</strong><br>
Used for conditional branches like <code>BEQ</code> (branch if equal) and <code>BNE</code> (branch if not equal).<br>
These are often used in loops and decision-making. The program counter (PC) is updated based on whether a condition is met.</p>
</li>
<li>
<p><strong>J-Type (Jump Instructions):</strong><br>
Used for unconditional jumps to a specific target address or for function calls.<br>
Examples include <code>JAL</code> (jump and link) and <code>JALR</code> (jump and link register). Unlike branch instructions, the PC is always updated to the target address.</p>
</li>
</ol>
<h3 id="architecture-overview">Architecture Overview</h3>
<p>The design of the 64-bit pipelined RISC-V processor will follow these key architectural principles:</p>
<h4 id="1-classic-5-stage-pipeline">1. Classic 5-Stage Pipeline</h4>
<ul>
<li>The processor will implement the classic <strong>5-stage pipeline</strong>:
<ul>
<li><strong>Fetch</strong></li>
<li><strong>Decode</strong></li>
<li><strong>Execute</strong></li>
<li><strong>Memory Access</strong></li>
<li><strong>Writeback</strong></li>
</ul>
</li>
<li>This pipeline will be <strong>in-order</strong>.</li>
</ul>
<h4 id="2-rv64i-isa-compliance">2. RV64I ISA Compliance</h4>
<ul>
<li>The processor will be fully compliant with the <strong>RV64I</strong> instruction set architecture.</li>
</ul>
<h4 id="3-separate-data-and-control-paths">3. Separate Data and Control Paths</h4>
<ul>
<li>The architecture will separate the <strong>data path</strong> and <strong>control path</strong>, optimizing the handling of data and control signals.</li>
</ul>
<h4 id="4-alu-design">4. ALU Design</h4>
<ul>
<li>Instead of using a single <strong>64-bit ALU</strong>, the design will incorporate a <strong>group of three 32-bit ALUs</strong>.</li>
<li><strong>ALU 1</strong> will perform operations on the <strong>lower 32 bits</strong> of the operands.</li>
<li>The <strong>carry</strong> generated from ALU 1 will serve as a control signal, determining which of the remaining ALUs (ALU 2 or ALU 3) should handle the subsequent computation. Specifically:
<ul>
<li>If <strong>carry = 0</strong>, ALU 2 will be selected.</li>
<li>If <strong>carry = 1</strong>, ALU 3 will be selected.</li>
</ul>
</li>
<li>This design improves the handling of 64-bit operations by dividing the computation across smaller ALUs, reducing complexity and potentially improving performance for specific instructions.</li>
</ul>
<hr>
<p>In the next post, I’ll dive deeper into the design phase, focusing on how to translate the architectural concepts.</p>
<p>Have a good day!!</p>
]]></content>
        </item>
        
        <item>
            <title>(Hu)go Template Primer</title>
            <link>http://localhost:1313/posts/2014/04/hugo-template-primer/</link>
            <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
            
            <guid>http://localhost:1313/posts/2014/04/hugo-template-primer/</guid>
            <description>&lt;p&gt;Hugo uses the excellent &lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt; &lt;a href=&#34;https://golang.org/pkg/html/template/&#34;&gt;html/template&lt;/a&gt; library for
its template engine. It is an extremely lightweight engine that provides a very
small amount of logic. In our experience that it is just the right amount of
logic to be able to create a good static website. If you have used other
template systems from different languages or frameworks you will find a lot of
similarities in Go templates.&lt;/p&gt;
&lt;p&gt;This document is a brief primer on using Go templates. The &lt;a href=&#34;https://golang.org/pkg/html/template/&#34;&gt;Go docs&lt;/a&gt;
provide more details.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>Hugo uses the excellent <a href="https://golang.org/">Go</a> <a href="https://golang.org/pkg/html/template/">html/template</a> library for
its template engine. It is an extremely lightweight engine that provides a very
small amount of logic. In our experience that it is just the right amount of
logic to be able to create a good static website. If you have used other
template systems from different languages or frameworks you will find a lot of
similarities in Go templates.</p>
<p>This document is a brief primer on using Go templates. The <a href="https://golang.org/pkg/html/template/">Go docs</a>
provide more details.</p>
<h2 id="introduction-to-go-templates">Introduction to Go Templates</h2>
<p>Go templates provide an extremely simple template language. It adheres to the
belief that only the most basic of logic belongs in the template or view layer.
One consequence of this simplicity is that Go templates parse very quickly.</p>
<p>A unique characteristic of Go templates is they are content aware. Variables and
content will be sanitized depending on the context of where they are used. More
details can be found in the <a href="https://golang.org/pkg/html/template/">Go docs</a>.</p>
<h2 id="basic-syntax">Basic Syntax</h2>
<p>Golang templates are HTML files with the addition of variables and
functions.</p>
<p><strong>Go variables and functions are accessible within {{ }}</strong></p>
<p>Accessing a predefined variable &ldquo;foo&rdquo;:</p>
<pre><code>{{ foo }}
</code></pre>
<p><strong>Parameters are separated using spaces</strong></p>
<p>Calling the add function with input of 1, 2:</p>
<pre><code>{{ add 1 2 }}
</code></pre>
<p><strong>Methods and fields are accessed via dot notation</strong></p>
<p>Accessing the Page Parameter &ldquo;bar&rdquo;</p>
<pre><code>{{ .Params.bar }}
</code></pre>
<p><strong>Parentheses can be used to group items together</strong></p>
<pre><code>{{ if or (isset .Params &quot;alt&quot;) (isset .Params &quot;caption&quot;) }} Caption {{ end }}
</code></pre>
<h2 id="variables">Variables</h2>
<p>Each Go template has a struct (object) made available to it. In hugo each
template is passed either a page or a node struct depending on which type of
page you are rendering. More details are available on the
<a href="/layout/variables">variables</a> page.</p>
<p>A variable is accessed by referencing the variable name.</p>
<pre><code>&lt;title&gt;{{ .Title }}&lt;/title&gt;
</code></pre>
<p>Variables can also be defined and referenced.</p>
<pre><code>{{ $address := &quot;123 Main St.&quot;}}
{{ $address }}
</code></pre>
<h2 id="functions">Functions</h2>
<p>Go template ship with a few functions which provide basic functionality. The Go
template system also provides a mechanism for applications to extend the
available functions with their own. <a href="/layout/functions">Hugo template
functions</a> provide some additional functionality we believe
are useful for building websites. Functions are called by using their name
followed by the required parameters separated by spaces. Template
functions cannot be added without recompiling hugo.</p>
<p><strong>Example:</strong></p>
<pre><code>{{ add 1 2 }}
</code></pre>
<h2 id="includes">Includes</h2>
<p>When including another template you will pass to it the data it will be
able to access. To pass along the current context please remember to
include a trailing dot. The templates location will always be starting at
the /layout/ directory within Hugo.</p>
<p><strong>Example:</strong></p>
<pre><code>{{ template &quot;chrome/header.html&quot; . }}
</code></pre>
<h2 id="logic">Logic</h2>
<p>Go templates provide the most basic iteration and conditional logic.</p>
<h3 id="iteration">Iteration</h3>
<p>Just like in Go, the Go templates make heavy use of range to iterate over
a map, array or slice. The following are different examples of how to use
range.</p>
<p><strong>Example 1: Using Context</strong></p>
<pre><code>{{ range array }}
    {{ . }}
{{ end }}
</code></pre>
<p><strong>Example 2: Declaring value variable name</strong></p>
<pre><code>{{range $element := array}}
    {{ $element }}
{{ end }}
</code></pre>
<p><strong>Example 2: Declaring key and value variable name</strong></p>
<pre><code>{{range $index, $element := array}}
    {{ $index }}
    {{ $element }}
{{ end }}
</code></pre>
<h3 id="conditionals">Conditionals</h3>
<p>If, else, with, or, &amp; and provide the framework for handling conditional
logic in Go Templates. Like range, each statement is closed with <code>end</code>.</p>
<p>Go Templates treat the following values as false:</p>
<ul>
<li>false</li>
<li>0</li>
<li>any array, slice, map, or string of length zero</li>
</ul>
<p><strong>Example 1: If</strong></p>
<pre><code>{{ if isset .Params &quot;title&quot; }}&lt;h4&gt;{{ index .Params &quot;title&quot; }}&lt;/h4&gt;{{ end }}
</code></pre>
<p><strong>Example 2: If -&gt; Else</strong></p>
<pre><code>{{ if isset .Params &quot;alt&quot; }}
    {{ index .Params &quot;alt&quot; }}
{{else}}
    {{ index .Params &quot;caption&quot; }}
{{ end }}
</code></pre>
<p><strong>Example 3: And &amp; Or</strong></p>
<pre><code>{{ if and (or (isset .Params &quot;title&quot;) (isset .Params &quot;caption&quot;)) (isset .Params &quot;attr&quot;)}}
</code></pre>
<p><strong>Example 4: With</strong></p>
<p>An alternative way of writing &ldquo;if&rdquo; and then referencing the same value
is to use &ldquo;with&rdquo; instead. With rebinds the context <code>.</code> within its scope,
and skips the block if the variable is absent.</p>
<p>The first example above could be simplified as:</p>
<pre><code>{{ with .Params.title }}&lt;h4&gt;{{ . }}&lt;/h4&gt;{{ end }}
</code></pre>
<p><strong>Example 5: If -&gt; Else If</strong></p>
<pre><code>{{ if isset .Params &quot;alt&quot; }}
    {{ index .Params &quot;alt&quot; }}
{{ else if isset .Params &quot;caption&quot; }}
    {{ index .Params &quot;caption&quot; }}
{{ end }}
</code></pre>
<h2 id="pipes">Pipes</h2>
<p>One of the most powerful components of Go templates is the ability to
stack actions one after another. This is done by using pipes. Borrowed
from unix pipes, the concept is simple, each pipeline&rsquo;s output becomes the
input of the following pipe.</p>
<p>Because of the very simple syntax of Go templates, the pipe is essential
to being able to chain together function calls. One limitation of the
pipes is that they only can work with a single value and that value
becomes the last parameter of the next pipeline.</p>
<p>A few simple examples should help convey how to use the pipe.</p>
<p><strong>Example 1 :</strong></p>
<pre><code>{{ if eq 1 1 }} Same {{ end }}
</code></pre>
<p>is the same as</p>
<pre><code>{{ eq 1 1 | if }} Same {{ end }}
</code></pre>
<p>It does look odd to place the if at the end, but it does provide a good
illustration of how to use the pipes.</p>
<p><strong>Example 2 :</strong></p>
<pre><code>{{ index .Params &quot;disqus_url&quot; | html }}
</code></pre>
<p>Access the page parameter called &ldquo;disqus_url&rdquo; and escape the HTML.</p>
<p><strong>Example 3 :</strong></p>
<pre><code>{{ if or (or (isset .Params &quot;title&quot;) (isset .Params &quot;caption&quot;)) (isset .Params &quot;attr&quot;)}}
Stuff Here
{{ end }}
</code></pre>
<p>Could be rewritten as</p>
<pre><code>{{  isset .Params &quot;caption&quot; | or isset .Params &quot;title&quot; | or isset .Params &quot;attr&quot; | if }}
Stuff Here
{{ end }}
</code></pre>
<h2 id="context-aka-the-dot">Context (aka. the dot)</h2>
<p>The most easily overlooked concept to understand about Go templates is that {{ . }}
always refers to the current context. In the top level of your template this
will be the data set made available to it. Inside of a iteration it will have
the value of the current item. When inside of a loop the context has changed. .
will no longer refer to the data available to the entire page. If you need to
access this from within the loop you will likely want to set it to a variable
instead of depending on the context.</p>
<p><strong>Example:</strong></p>
<pre><code>  {{ $title := .Site.Title }}
  {{ range .Params.tags }}
    &lt;li&gt; &lt;a href=&quot;{{ $baseurl }}/tags/{{ . | urlize }}&quot;&gt;{{ . }}&lt;/a&gt; - {{ $title }} &lt;/li&gt;
  {{ end }}
</code></pre>
<p>Notice how once we have entered the loop the value of {{ . }} has changed. We
have defined a variable outside of the loop so we have access to it from within
the loop.</p>
<h1 id="hugo-parameters">Hugo Parameters</h1>
<p>Hugo provides the option of passing values to the template language
through the site configuration (for sitewide values), or through the meta
data of each specific piece of content. You can define any values of any
type (supported by your front matter/config format) and use them however
you want to inside of your templates.</p>
<h2 id="using-content-page-parameters">Using Content (page) Parameters</h2>
<p>In each piece of content you can provide variables to be used by the
templates. This happens in the <a href="/content/front-matter">front matter</a>.</p>
<p>An example of this is used in this documentation site. Most of the pages
benefit from having the table of contents provided. Sometimes the TOC just
doesn&rsquo;t make a lot of sense. We&rsquo;ve defined a variable in our front matter
of some pages to turn off the TOC from being displayed.</p>
<p>Here is the example front matter:</p>
<pre tabindex="0"><code>---
title: &#34;Permalinks&#34;
date: &#34;2013-11-18&#34;
aliases:
  - &#34;/doc/permalinks/&#34;
groups: [&#34;extras&#34;]
groups_weight: 30
notoc: true
---
</code></pre><p>Here is the corresponding code inside of the template:</p>
<pre><code>  {{ if not .Params.notoc }}
    &lt;div id=&quot;toc&quot; class=&quot;well col-md-4 col-sm-6&quot;&gt;
    {{ .TableOfContents }}
    &lt;/div&gt;
  {{ end }}
</code></pre>
<h2 id="using-site-config-parameters">Using Site (config) Parameters</h2>
<p>In your top-level configuration file (eg, <code>config.yaml</code>) you can define site
parameters, which are values which will be available to you in chrome.</p>
<p>For instance, you might declare:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">params</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">CopyrightHTML</span>: <span style="color:#e6db74">&#34;Copyright &amp;#xA9; 2013 John Doe. All Rights Reserved.&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">TwitterUser</span>: <span style="color:#e6db74">&#34;spf13&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">SidebarRecentLimit</span>: <span style="color:#ae81ff">5</span>
</span></span></code></pre></div><p>Within a footer layout, you might then declare a <code>&lt;footer&gt;</code> which is only
provided if the <code>CopyrightHTML</code> parameter is provided, and if it is given,
you would declare it to be HTML-safe, so that the HTML entity is not escaped
again.  This would let you easily update just your top-level config file each
January 1st, instead of hunting through your templates.</p>
<pre tabindex="0"><code>{{if .Site.Params.CopyrightHTML}}&lt;footer&gt;
&lt;div class=&#34;text-center&#34;&gt;{{.Site.Params.CopyrightHTML | safeHtml}}&lt;/div&gt;
&lt;/footer&gt;{{end}}
</code></pre><p>An alternative way of writing the &ldquo;if&rdquo; and then referencing the same value
is to use &ldquo;with&rdquo; instead. With rebinds the context <code>.</code> within its scope,
and skips the block if the variable is absent:</p>
<pre tabindex="0"><code>{{with .Site.Params.TwitterUser}}&lt;span class=&#34;twitter&#34;&gt;
&lt;a href=&#34;https://twitter.com/{{.}}&#34; rel=&#34;author&#34;&gt;
&lt;img src=&#34;http://localhost:1313/images/twitter.png&#34; width=&#34;48&#34; height=&#34;48&#34; title=&#34;Twitter: {{.}}&#34;
 alt=&#34;Twitter&#34;&gt;&lt;/a&gt;
&lt;/span&gt;{{end}}
</code></pre><p>Finally, if you want to pull &ldquo;magic constants&rdquo; out of your layouts, you can do
so, such as in this example:</p>
<pre tabindex="0"><code>&lt;nav class=&#34;recent&#34;&gt;
  &lt;h1&gt;Recent Posts&lt;/h1&gt;
  &lt;ul&gt;{{range first .Site.Params.SidebarRecentLimit .Site.Recent}}
    &lt;li&gt;&lt;a href=&#34;{{.RelPermalink}}&#34;&gt;{{.Title}}&lt;/a&gt;&lt;/li&gt;
  {{end}}&lt;/ul&gt;
&lt;/nav&gt;
</code></pre>]]></content>
        </item>
        
        <item>
            <title>Getting Started with Hugo</title>
            <link>http://localhost:1313/posts/2014/04/getting-started-with-hugo/</link>
            <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
            
            <guid>http://localhost:1313/posts/2014/04/getting-started-with-hugo/</guid>
            <description>&lt;h2 id=&#34;step-1-install-hugo&#34;&gt;Step 1. Install Hugo&lt;/h2&gt;
&lt;p&gt;Go to &lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;Hugo releases&lt;/a&gt; and download the
appropriate version for your OS and architecture.&lt;/p&gt;
&lt;p&gt;Save it somewhere specific as we will be using it in the next step.&lt;/p&gt;
&lt;p&gt;More complete instructions are available at &lt;a href=&#34;https://gohugo.io/getting-started/installing/&#34;&gt;Install Hugo&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;step-2-build-the-docs&#34;&gt;Step 2. Build the Docs&lt;/h2&gt;
&lt;p&gt;Hugo has its own example site which happens to also be the documentation site
you are reading right now.&lt;/p&gt;
&lt;p&gt;Follow the following steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Clone the &lt;a href=&#34;http://github.com/spf13/hugo&#34;&gt;Hugo repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Go into the repo&lt;/li&gt;
&lt;li&gt;Run hugo in server mode and build the docs&lt;/li&gt;
&lt;li&gt;Open your browser to http://localhost:1313&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Corresponding pseudo commands:&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h2 id="step-1-install-hugo">Step 1. Install Hugo</h2>
<p>Go to <a href="https://github.com/spf13/hugo/releases">Hugo releases</a> and download the
appropriate version for your OS and architecture.</p>
<p>Save it somewhere specific as we will be using it in the next step.</p>
<p>More complete instructions are available at <a href="https://gohugo.io/getting-started/installing/">Install Hugo</a></p>
<h2 id="step-2-build-the-docs">Step 2. Build the Docs</h2>
<p>Hugo has its own example site which happens to also be the documentation site
you are reading right now.</p>
<p>Follow the following steps:</p>
<ol>
<li>Clone the <a href="http://github.com/spf13/hugo">Hugo repository</a></li>
<li>Go into the repo</li>
<li>Run hugo in server mode and build the docs</li>
<li>Open your browser to http://localhost:1313</li>
</ol>
<p>Corresponding pseudo commands:</p>
<pre><code>git clone https://github.com/spf13/hugo
cd hugo
/path/to/where/you/installed/hugo server --source=./docs
&gt; 29 pages created
&gt; 0 tags index created
&gt; in 27 ms
&gt; Web Server is available at http://localhost:1313
&gt; Press ctrl+c to stop
</code></pre>
<p>Once you&rsquo;ve gotten here, follow along the rest of this page on your local build.</p>
<h2 id="step-3-change-the-docs-site">Step 3. Change the docs site</h2>
<p>Stop the Hugo process by hitting Ctrl+C.</p>
<p>Now we are going to run hugo again, but this time with hugo in watch mode.</p>
<pre><code>/path/to/hugo/from/step/1/hugo server --source=./docs --watch
&gt; 29 pages created
&gt; 0 tags index created
&gt; in 27 ms
&gt; Web Server is available at http://localhost:1313
&gt; Watching for changes in /Users/spf13/Code/hugo/docs/content
&gt; Press ctrl+c to stop
</code></pre>
<p>Open your <a href="http://vim.spf13.com">favorite editor</a> and change one of the source
content pages. How about changing this very file to <em>fix the typo</em>. How about changing this very file to <em>fix the typo</em>.</p>
<p>Content files are found in <code>docs/content/</code>. Unless otherwise specified, files
are located at the same relative location as the url, in our case
<code>docs/content/overview/quickstart.md</code>.</p>
<p>Change and save this file.. Notice what happened in your terminal.</p>
<pre><code>&gt; Change detected, rebuilding site

&gt; 29 pages created
&gt; 0 tags index created
&gt; in 26 ms
</code></pre>
<p>Refresh the browser and observe that the typo is now fixed.</p>
<p>Notice how quick that was. Try to refresh the site before it&rsquo;s finished building. I double dare you.
Having nearly instant feedback enables you to have your creativity flow without waiting for long builds.</p>
<h2 id="step-4-have-fun">Step 4. Have fun</h2>
<p>The best way to learn something is to play with it.</p>
]]></content>
        </item>
        
    </channel>
</rss>
